# GitHub Actions Workflow created for handling the release process based on the draft release prepared with the Build workflow.
# Running the publishPlugin task requires all the following secrets to be provided: PUBLISH_TOKEN, PRIVATE_KEY, PRIVATE_KEY_PASSWORD, CERTIFICATE_CHAIN.
# See https://plugins.jetbrains.com/docs/intellij/plugin-signing.html for more information.

name: Release
on:
  release:
    types: [prereleased, released]

jobs:

  # Prepare and publish the plugin to JetBrains Marketplace repository
  release:
    name: Publish Plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          large-packages: false

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.release.tag_name }}

      # Set up the Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: true

      # Update the Unreleased section with the current release note
      - name: Patch Changelog
        if: ${{ github.event.release.body != '' }}
        env:
          CHANGELOG: ${{ github.event.release.body }}
        run: |
          VERSION_RAW="${{ github.event.release.tag_name }}"
          VERSION="${VERSION_RAW#v}"
          RELEASE_NOTE="./build/tmp/release_note.txt"
          mkdir -p "$(dirname "$RELEASE_NOTE")"
          echo "$CHANGELOG" > $RELEASE_NOTE

          ./gradlew patchChangelog --release-note-file=$RELEASE_NOTE

          # Patch Chinese changelog: rename Unreleased -> [VERSION] and add new Unreleased on top
          if [ -f CHANGELOG_zh.md ]; then
            awk -v ver="$VERSION" '
              !done && $0 ~ /^## \[Unreleased\]\s*$/ { print "## [Unreleased]\n\n## [" ver "]"; done=1; next }
              { print }
            ' CHANGELOG_zh.md > CHANGELOG_zh.md.tmp && mv CHANGELOG_zh.md.tmp CHANGELOG_zh.md
          fi

      # Publish the plugin to JetBrains Marketplace
      - name: Publish Plugin
        env:
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
          CERTIFICATE_CHAIN: ${{ secrets.CERTIFICATE_CHAIN }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          PRIVATE_KEY_PASSWORD: ${{ secrets.PRIVATE_KEY_PASSWORD }}
        run: ./gradlew publishPlugin

      # Upload an artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ./build/distributions/*

      # After successful publish, update main branch changelog via PR with auto-merge
      - name: Check out main branch
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Patch Changelog on main
        if: ${{ github.event.release.body != '' }}
        env:
          CHANGELOG: ${{ github.event.release.body }}
        run: |
          VERSION_RAW="${{ github.event.release.tag_name }}"
          VERSION="${VERSION_RAW#v}"
          RELEASE_NOTE="./build/tmp/release_note.txt"
          mkdir -p "$(dirname "$RELEASE_NOTE")"
          echo "$CHANGELOG" > $RELEASE_NOTE

          ./gradlew patchChangelog --release-note-file=$RELEASE_NOTE

          # Patch Chinese changelog: rename Unreleased -> [VERSION] and add new Unreleased on top
          if [ -f CHANGELOG_zh.md ]; then
            awk -v ver="$VERSION" '
              !done && $0 ~ /^## \[Unreleased\]\s*$/ { print "## [Unreleased]\n\n## [" ver "]"; done=1; next }
              { print }
            ' CHANGELOG_zh.md > CHANGELOG_zh.md.tmp && mv CHANGELOG_zh.md.tmp CHANGELOG_zh.md
          fi

      - name: Create PR for changelog update (auto-merge)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION_RAW="${{ github.event.release.tag_name }}"
          VERSION="${VERSION_RAW#v}"
          BRANCH="changelog/update-$VERSION"
          LABEL="release changelog"

          git switch -c "$BRANCH"
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          # Stage potential changelog files
          git add CHANGELOG.md || true
          if [ -f CHANGELOG_zh.md ]; then
            git add CHANGELOG_zh.md || true
          fi

          # Commit only if there are staged changes
          if ! git diff --cached --quiet; then
            git commit -m "chore(changelog): update for $VERSION"
            git push --set-upstream origin "$BRANCH"

            # Ensure label exists
            gh label create "$LABEL" \
              --description "Pull requests with release changelog update" \
              --force \
              || true

            # Create PR targeting main
            gh pr create \
              --title "Changelog update - $VERSION" \
              --body "This PR updates \`CHANGELOG.md\` replacing Unreleased with \`$VERSION\` and adds a new Unreleased section." \
              --label "$LABEL" \
              --base main \
              --head "$BRANCH"

            # Enable auto-merge (squash); will merge when checks pass
            gh pr merge --auto --squash "$BRANCH" || true
          else
            echo "No changelog changes detected; skipping PR creation."
          fi
