# 插件信息
plugin.name=Intercept Wave

# 工具窗口
toolwindow.title=Intercept Wave - Mock 服务
toolwindow.status.stopped=状态: 未启动
toolwindow.status.running=状态: 运行中
toolwindow.access.url=访问地址: {0}
toolwindow.button.start=启动服务
toolwindow.button.stop=停止服务
toolwindow.button.config=配置
toolwindow.config.title=当前配置

# 配置对话框
config.dialog.title=Mock 服务配置
config.global.title=全局配置
config.global.port=Mock端口:
config.global.port.tooltip=Mock服务监听的本地端口
config.global.prefix=拦截前缀:
config.global.prefix.tooltip=需要拦截的接口路径前缀，例如: /api
config.global.baseurl=原始接口地址:
config.global.baseurl.tooltip=原始接口的基础URL，例如: http://localhost:8080
config.global.stripprefix=过滤/取消前缀
config.global.stripprefix.tooltip=启用后，在匹配Mock接口时会去掉拦截前缀。例如：拦截前缀为"{1}"，Mock接口配置path="/user"，访问localhost:{0}{1}/user时会匹配成功。禁用时，Mock接口path需要配置完整路径"{1}/user"
config.mock.title=Mock接口配置
config.table.enabled=启用
config.table.path=路径
config.table.method=方法
config.table.statuscode=状态码
config.table.delay=延迟(ms)
config.button.add=添加接口
config.button.edit=编辑
config.button.delete=删除
config.message.select=请先选择一个接口
config.message.confirm.delete=确定要删除这个Mock接口吗？
config.message.confirm.title=确认删除
config.message.info=提示
config.message.success.save=配置保存成功
config.message.error.save=保存配置失败: {0}
config.message.error=错误

# Mock接口对话框
mockapi.dialog.title.add=添加Mock接口
mockapi.dialog.title.edit=编辑Mock接口
mockapi.enabled=启用
mockapi.path=接口路径:
mockapi.path.tooltip=例如: /api/user/info
mockapi.method=HTTP方法:
mockapi.statuscode=状态码:
mockapi.statuscode.tooltip=HTTP响应状态码，例如: 200, 404, 500
mockapi.delay=延迟(毫秒):
mockapi.delay.tooltip=模拟网络延迟，单位：毫秒
mockapi.usecookie=使用全局Cookie
mockapi.usecookie.tooltip=启用后，会在响应中包含配置的全局Cookie（Set-Cookie响应头）
mockapi.mockdata=Mock数据 (JSON):
mockapi.button.format=格式化JSON
mockapi.validation.path.empty=接口路径不能为空
mockapi.validation.path.slash=接口路径必须以/开头
mockapi.validation.statuscode.invalid=状态码必须是有效的数字
mockapi.validation.delay.invalid=延迟必须是有效的数字
mockapi.validation.mockdata.empty=Mock数据不能为空
mockapi.message.json.error=JSON格式错误: {0}

# 消息提示
message.start.success=Mock服务启动成功！\n访问地址: {0}
message.start.failed=Mock服务启动失败，请检查端口是否被占用
message.start.error=Mock服务启动失败: {0}
message.stop.success=Mock服务已停止
message.stop.error=停止Mock服务失败: {0}

# v2.0 多配置组相关
config.group.name=配置组名称
config.group.name.tooltip=自定义配置组名称，如：用户服务、订单服务
config.group.port=端口号
config.group.port.tooltip=Mock服务器监听端口，默认 8888
config.group.prefix=拦截前缀
config.group.prefix.tooltip=需要拦截的API路径前缀，如：/api
config.group.baseurl=目标地址
config.group.baseurl.tooltip=原始服务器地址，未配置Mock的请求会转发到此地址
config.group.stripprefix=剥离前缀
config.group.stripprefix.tooltip=启用后，匹配时会去掉拦截前缀。例如：请求 /api/user 会匹配 Mock 路径 /user
config.group.cookie=全局Cookie
config.group.cookie.tooltip=全局Cookie值，格式：sessionId=abc123; userId=456
config.group.enabled=启用该配置组
config.group.enabled.tooltip=禁用后该配置组不会启动
config.group.settings=配置组设置
config.group.mocklist=Mock 接口列表
config.group.add=新增配置组
config.group.delete=删除当前配置组
config.group.move.left=左移
config.group.move.right=右移
config.group.delete.confirm=确定要删除配置组「{0}」吗？
config.group.delete.confirm.title=确认删除
config.group.delete.atleastone=至少需要保留一个配置组
config.group.select.first=请先选择要删除的配置组
config.validation.input.error=请检查配置输入是否正确
config.validation.input.error.title=输入错误
config.validation.port.invalid=端口号必须是 1-65535 之间的数字
config.save.error=保存配置失败: {0}
config.save.error.title=错误
mockapi.add.button=添加接口
mockapi.edit.button=编辑
mockapi.delete.button=删除
mockapi.select.first.edit=请先选择要编辑的接口
mockapi.select.first.delete=请先选择要删除的接口
mockapi.delete.confirm=确定要删除该Mock接口吗？

# 配置迁移通知
config.migration.title=配置已自动升级
config.migration.message=配置文件已升级到 v2.0 版本，现在支持多配置组功能。旧配置已备份为 config.json.backup

# 工具窗口扩展
toolwindow.button.startall=启动所有
toolwindow.button.stopall=停止所有
toolwindow.empty.hint=没有配置组，请点击「配置」按钮添加
toolwindow.empty.tab=空
toolwindow.add.hint=点击「配置」按钮添加新配置组
toolwindow.status.title=服务状态
toolwindow.status.enabled=已启用
toolwindow.status.disabled=已禁用
toolwindow.status.running.indicator=运行中
toolwindow.status.stopped.indicator=已停止
toolwindow.label.config.status=配置状态:
toolwindow.label.running.status=运行状态:
toolwindow.label.url=访问地址:
toolwindow.config.notfound=配置不存在
toolwindow.config.name=配置组名称: {0}
toolwindow.config.port=端口号: {0}
toolwindow.config.prefix=拦截前缀: {0}
toolwindow.config.baseurl=目标地址: {0}
toolwindow.config.stripprefix=剥离前缀: {0}
toolwindow.config.cookie=全局Cookie: {0}
toolwindow.config.mocklist=Mock 接口列表:
toolwindow.config.nomock=  (无配置)
toolwindow.yes=是
toolwindow.no=否
toolwindow.notset=(未设置)

# 控制台日志
console.starting=正在启动: 「{0}」
console.port=端口: {0}
console.prefix=拦截前缀: {0}
console.baseurl=目标地址: {0}
console.stripprefix=剥离前缀: {0}
console.started=「{0}」启动成功!
console.access.url=访问地址: {0}
console.mockapis.enabled=Mock APIs: {0}/{1} 已启用
console.startall=正在启动所有配置组...
console.startall.done=启动完成: {0}/{1} 个配置组成功启动
console.allstopped=所有服务器已停止
console.start.failed.reason=启动失败: {0}
console.server.stopped=「{0}」已停止
console.request=[{0}] ➤ {1} {2}
console.matched.path=  [{0}]   匹配路径: {1}
console.forwarding.to=  [{0}]   → 转发至: {1}
console.mock.matched=[{0}]   ← {1} Mock
console.forwarded=[{0}]   ← {1} Proxied
console.stopping.all.from.stop=正在通过 Stop 按钮停止所有服务…

# 默认值
config.group.default=默认配置
config.group.default.indexed=配置组 {0}
console.descriptor.title=Intercept Wave Mock 服务

# 错误/警告
error.config.notfound=配置组不存在
error.config.disabled=配置组已禁用
error.port.in.use=端口已被占用
error.no.enabled.config=没有启用的配置组
error.request.processing=请求处理错误
error.proxy.error=代理错误

# 欢迎页
welcome.running=Intercept Wave Mock 服务运行中
welcome.usage.description=访问配置的 Mock 接口路径即可获取 Mock 数据
